{"ast":null,"code":"// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import api from '../services/api';\n\n// const AuthContext = createContext(null);\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (token) {\n//       loadUser();\n//     } else {\n//       setLoading(false);\n//     }\n//   }, [token]);\n\n//   const loadUser = async () => {\n//     try {\n//       const response = await api.get('/auth/profile');\n//       setUser(response.data.data);\n//     } catch (error) {\n//       console.error('Load user error:', error);\n//       logout();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await api.post('/auth/login', { email, password });\n//       const { user, token } = response.data.data;\n\n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Login gagal'\n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await api.post('/auth/register', userData);\n//       const { user, token } = response.data.data;\n\n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Registrasi gagal'\n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setToken(null);\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     loading,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };","map":{"version":3,"names":[],"sources":["/Users/rio/Documents/RIO/Pemrograman/bbo-event/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import api from '../services/api';\n\n// const AuthContext = createContext(null);\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (token) {\n//       loadUser();\n//     } else {\n//       setLoading(false);\n//     }\n//   }, [token]);\n\n//   const loadUser = async () => {\n//     try {\n//       const response = await api.get('/auth/profile');\n//       setUser(response.data.data);\n//     } catch (error) {\n//       console.error('Load user error:', error);\n//       logout();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await api.post('/auth/login', { email, password });\n//       const { user, token } = response.data.data;\n      \n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n      \n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Login gagal'\n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await api.post('/auth/register', userData);\n//       const { user, token } = response.data.data;\n      \n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n      \n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Registrasi gagal'\n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setToken(null);\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     loading,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}