{"ast":null,"code":"var _jsxFileName = \"/Users/rio/Documents/RIO/Pemrograman/bbo-event/frontend/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import api from '../services/api';\n\n// const AuthContext = createContext(null);\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (token) {\n//       loadUser();\n//     } else {\n//       setLoading(false);\n//     }\n//   }, [token]);\n\n//   const loadUser = async () => {\n//     try {\n//       const response = await api.get('/auth/profile');\n//       setUser(response.data.data);\n//     } catch (error) {\n//       console.error('Load user error:', error);\n//       logout();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await api.post('/auth/login', { email, password });\n//       const { user, token } = response.data.data;\n\n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Login gagal'\n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await api.post('/auth/register', userData);\n//       const { user, token } = response.data.data;\n\n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Registrasi gagal'\n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setToken(null);\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     loading,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };\n\nimport React, { createContext, useState, useContext, useEffect, useCallback // <--- 1. Import useCallback\n} from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // 2. Stabilkan 'logout' agar tidak dibuat ulang setiap render\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  }, []); // Dependensi kosong karena setter (setUser, setToken) stabil\n\n  // 3. Stabilkan 'loadUser' dan tambahkan 'logout' sebagai dependensinya\n  const loadUser = useCallback(async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      setUser(response.data.data);\n    } catch (error) {\n      console.error('Load user error:', error);\n      logout(); // Memanggil 'logout' yang sudah stabil\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]); // <-- Dependensi ke 'logout'\n\n  useEffect(() => {\n    if (token) {\n      loadUser();\n    } else {\n      setLoading(false);\n    }\n  }, [token, loadUser]); // <--- 4. Tambahkan 'loadUser' ke dependency array\n\n  // 5. (Opsional tapi bagus) Stabilkan 'login' dan 'register'\n  // Ini mencegah re-render yang tidak perlu pada komponen anak\n  // yang menggunakan fungsi-fungsi ini.\n  const login = useCallback(async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login gagal'\n      };\n    }\n  }, []); // Dependensi kosong (setter stabil)\n\n  const register = useCallback(async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      const {\n        user,\n        token\n      } = response.data.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registrasi gagal'\n      };\n    }\n  }, []); // Dependensi kosong (setter stabil)\n\n  // Nilai 'value' sekarang berisi fungsi-fungsi yang stabil\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"R6q+fFl2L4SGB3vAqY7mwILDG/Y=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","logout","removeItem","loadUser","response","get","data","error","console","login","email","password","post","setItem","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rio/Documents/RIO/Pemrograman/bbo-event/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import api from '../services/api';\n\n// const AuthContext = createContext(null);\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (token) {\n//       loadUser();\n//     } else {\n//       setLoading(false);\n//     }\n//   }, [token]);\n\n//   const loadUser = async () => {\n//     try {\n//       const response = await api.get('/auth/profile');\n//       setUser(response.data.data);\n//     } catch (error) {\n//       console.error('Load user error:', error);\n//       logout();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await api.post('/auth/login', { email, password });\n//       const { user, token } = response.data.data;\n      \n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n      \n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Login gagal'\n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await api.post('/auth/register', userData);\n//       const { user, token } = response.data.data;\n      \n//       localStorage.setItem('token', token);\n//       setToken(token);\n//       setUser(user);\n      \n//       return { success: true, user };\n//     } catch (error) {\n//       return {\n//         success: false,\n//         message: error.response?.data?.message || 'Registrasi gagal'\n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setToken(null);\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     loading,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };\n\nimport React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useCallback, // <--- 1. Import useCallback\n} from 'react';\nimport api from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // 2. Stabilkan 'logout' agar tidak dibuat ulang setiap render\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  }, []); // Dependensi kosong karena setter (setUser, setToken) stabil\n\n  // 3. Stabilkan 'loadUser' dan tambahkan 'logout' sebagai dependensinya\n  const loadUser = useCallback(async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      setUser(response.data.data);\n    } catch (error) {\n      console.error('Load user error:', error);\n      logout(); // Memanggil 'logout' yang sudah stabil\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]); // <-- Dependensi ke 'logout'\n\n  useEffect(() => {\n    if (token) {\n      loadUser();\n    } else {\n      setLoading(false);\n    }\n  }, [token, loadUser]); // <--- 4. Tambahkan 'loadUser' ke dependency array\n\n  // 5. (Opsional tapi bagus) Stabilkan 'login' dan 'register'\n  // Ini mencegah re-render yang tidak perlu pada komponen anak\n  // yang menggunakan fungsi-fungsi ini.\n  const login = useCallback(async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      const { user, token } = response.data.data;\n\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n\n      return { success: true, user };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Login gagal',\n      };\n    }\n  }, []); // Dependensi kosong (setter stabil)\n\n  const register = useCallback(async (userData) => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      const { user, token } = response.data.data;\n\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n\n      return { success: true, user };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Registrasi gagal',\n      };\n    }\n  }, []); // Dependensi kosong (setter stabil)\n\n  // Nilai 'value' sekarang berisi fungsi-fungsi yang stabil\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}